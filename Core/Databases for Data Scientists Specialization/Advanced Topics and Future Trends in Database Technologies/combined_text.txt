1The Relational ProblemSituation:•Big Data is exploding all around us•The explosion of Big Data is booming at an increasing rateProblem:Relational Database Systems cannot handle the volume, velocityand varietyof Big Data. The Relational Problem2Challenges•How can we collect, process and store so much data? •How can we process so much data in a timely manner? •How can we analyze so much data and gain meaningful insights?•Can my existing systems/architectures handle this? •Can my existing staff (skills & tools) make the transition?  The Relational Problem3The Relational ProblemThe Relational Database:  40+ year-old technology•Demands STRUCTURE:  Tables, Rows, Columns, Keys, Indexes•Demands ACID Transaction Compliance•Keep my data consistent across transactions•Data Consistency VS Fast Performance and ThroughputThe Relational Problem
What if my Big Data is UNSTRUCTURED? What if customers demand speed over consistency? 4The Relational ProblemDatabase Professionals face a challenge:Do we keep using our relational database systems? Do we transition to newer NoSQL database systems that are designed to handle Big Data? 5The Relational ProblemOne approach:Keep our relational systems, but enhance them to better handle the demands of Big Data. 6The Relational ProblemTechniques to Help RDBMS Handle Big Data•Scaling–Out versus Up•UP:  Add CPU, Memory, Storage –can be costly•OUT:  Add server nodes to a cluster •Clustering•“Commodity” Hardware•Introduces some overhead for inter-node communications7The Relational ProblemMultiple server nodes in a cluster   work together as oneLinear scalability:   Can twicethe number of nodes cut processing time in half? 
8Side Notes --Scaling OutGoogle has been the pioneer in clustering solutions.Watch the Google Container Data Center video.  (2009)https://www.youtube.com/watch?v=zRwPSFpLX8IChallenges they faced and figured out:•Managing Heat •Server Maintenance•UPS –Uninterruptible Power Supply9Side Notes --Scaling OutFollow up:  Watch these Google Data Center tours (7 years later) https://www.youtube.com/watch?v=zDAYZU4A3w0https://www.youtube.com/watch?v=XZmGGAbHqa0https://www.youtube.com/watch?v=avP5d16wEp010The Relational ProblemTechniques to Help RDBMS Handle Big Data•Replication•The foundation of clustering •Parallelization•Computing processes are spread out among all the nodes•Allows work to be done in parallel •Sharding•Subsets of data ("partitions") are spread across different nodes•Allows work to be done in parallel, increases throughput 11The Relational Problem
The role of the "Watcher" in Replication•Sometimes called a "coordinator" node •A component of the replication engine•A special server node that manages the cluster•Directs traffic from application software•Detects if a node goes down, and initiates a FAIL  OVER to a secondary node•Provides HA (High Availability) •Eliminates any SPOF (Single Point Of Failure) 12The Relational ProblemSharding•Distribute data partitions across nodes •Based on key range values•The watcher directs query traffic based upon key values•Allows parallelization
13The Relational ProblemSharding + Replication•Data is distributed via shardingAND•Data is stored redundantly via replication•Further supports parallelization and HA
14The Relational ProblemTwo modes of replication•Primary-to-Secondary (also called "Master-Slave")•Peer-to-Peer 15The Relational ProblemPrimary-to-Secondary Replication•All UPDATES must go to Primary node•READ activity can run against any nodeAdvantages•Good READ Scalability –just add more secondary nodes•Guarantees UPDATE isolationDisadvantages•Constrained by the capacity of the Primary node16The Relational ProblemPeer-to-Peer Replication•UPDATES and READs can go to any nodeAdvantages•Good Scalability –just add more nodes•Provides robust HA in case of node failureDisadvantages•Update propogation is very complex•Difficult to guarantee update isolation17The Relational ProblemThoughts on ReplicationWhat if replicas are geographically distributed? •There can be latency (delay) as updates are propogated across a network•This could cause READ anomalies Trade-off •Data Consistency versus Processing Speed 18The Relational Problem
Geographically distributed nodes •Update on Node 1•READ against Node 3 before the update is propogated•What if the WAN is down? Trade-off •Do I require absolute Data Consistency?•Do I want to delay remote READs while waiting for update propogation? •Or, do I seek the fastest possible execution at the cost of perfect consistency?  19Solving The Relational ProblemCompromise: Enhance my RDBMS architecture to Handle Big DataOr:Abandon Relational DBMS and adopt NoSQL20Solving The Relational ProblemPros & Cons•Keep Using Relational Database Systems•Leverage Software Costs / Investment •Leverage existing Staff•Leverage existing Application Software/Code•Expand by scaling out (horizontally)•Use the Cloud where possible•Utilize Replication, Sharding •Leverage Parallelization (queries run in parallel on different nodes)•Relax ACID compliance where possible for faster throughput 21Solving The Relational ProblemPros & Cons•Adopt a new NoSQL solution•Handles unstructured data •Re-train or replace staff•Rewrite existing Application Software/Code•NoSQL Utilizes Replication, Sharding, Parallelization•NoSQL Relaxes ACID compliance•NoSQL opts for speed over consistency1Relational VS NoSQLRecap•Relational DBMS software has worked very well for many decades•Companies have invested lots of money in software built upon relational DBMS infrastructure•Companies have invested in staff/talent skilled in RDBMS technologiesBUT•RDBMS systems struggle to scale to support Big Data’s volume, variety, and velocity demands•Big Data is exploding faster than RDBMS technologies can handle2NoSQL (“Not Only SQL”)•Uses Clusters: •Distribute the Data via Replication & Sharding •Distribute the Processing Across Multiple Nodes in a Cluster•Uses Replication to provide•Redundancy•High Availability•Parallel Processing•VERY Horizontally scalableRelational VS NoSQL3NoSQL (“Not Only SQL”)•Requires Less Structure •Does not store data in tables with rigid row/column structure•Uses an "Aggregate" model (very de-normalized)•Restricts join capabilities •Relaxes ACID transaction compliance•May use a non-SQL query language•Typically open source, very low-cost software acquisitionRelational VS NoSQL4Relational•Schema defines rigid structure•Tables, Rows, Columns•Foreign Key relationships enable joins•Uses SQL language•Maintains ACID transaction compliance•Normalized: store a value only once•Clustering available (but challenging)•Leading DBMS solutions are quite expensiveNoSQL•Stores related values in aggregates•Flexible structure:–Ranges from none to some•No joins•Uses alternate query language•Relaxed ACID compliance•Data is De-normalized•Designed to support clustering,  replication, sharding•Almost all players are open source and low-costRelational VS NoSQL5NOSQL Database  ModelsThe “Aggregate” Data Model•RDBMS requires Tables, Rows, Columns as data stores•Columns have “domains” of values•Third normal form –no multi-values, “store it once”•NoSQL systems use AGGREGATESas data stores•Data values are grouped together as users need them•Think of an unnormalized document, or an “object” •Contains related values that are retrieved and manipulated together6NOSQL Database Models
Aggregate VS3rdNormal Form7NOSQL Database ModelsAggregates are conceptually the opposite of 3rdNormal FormWhy aggregates?•It is difficult to spread a relational model across nodes in a cluster•Replication and shardingintroduce big challenges in consistency•Each query should minimize the number of nodes being accessed across the cluster•Data values that are accessed together should live on the same node8NOSQL Database ModelsFOUR basic NOSQL Database Models•Document Store(using XML or JSON format)•Graph(using Node/Edge structures with Properties)•Key-Valuepairs •Wide Column Store(rows with dynamic columns holding key-value pairs) 9NOSQL Database ModelsDocument Database •Organized around a “document” containing text•Can handle very large data volumes•Provides Speed and Scalability•Document format is easily understood by humans•No “schema”, but JSON/XML provides internal structure within a document•Documents are indexed and stored within “collections” •Supports full text searchPopular Implementations (open source)•MongoDB•CouchDB10NOSQL Database Models{"_id" : ObjectId("5e97444c99cddc2f99933a94"),"address" : {"building" : "284","coord" : [-73.9829239,40.6580753],"street" : "Prospect Park West","zipcode" : "11215"},"borough" : "Brooklyn","cuisine" : "American","grades" : [{"date" : ISODate("2012-12-05T00:00:00Z"),"grade" : "A","score" : 13},{"date" : ISODate("2012-05-17T00:00:00Z"),"grade" : "A","score" : 11}],"name" : "The Movable Feast","restaurant_id" : "40361606"}Sample Document•JSON (Java Script Object Notation)•Key:Value pairs provide some structure•One primary key per document•Not all documents must have the same key:value pairs11NOSQL Database Models<contact> <firstname>Bob</firstname> <lastname>Smith</lastname> <phone type="Cell">(123)555-0178</phone> <phone type="Work">(890)555-0133</phone> <address> <type>Home</type> <street>123 Black St.</street> <city>Big Rock</city> <state>AR</state> <zip>23225</zip> <country>USA</country> </address> </contact>Sample Document•XML (Extended Markup Language)•Tag:Value pairs provide some structure12NOSQL Database ModelsDocument Database •Keeps related information together (not normalized into tables)•Access to a document is fast (index/key/URL)•ACID compliance is maintained only within a document•Cannot “join” across documents•Documents are kept in “collections" 13NOSQL Database ModelsGraph Database •Uses a graph structure consisting of •Nodes–Represents an entity (like a person)•Edges–Represents a relationship between entities•Properties–Attributes associated with Nodes and Edges•Supports navigation along edges from a starting point node•Designed for applications tracking the inter-connections among entities•Who is friends with whom? (In a social network application)•Who is following me, who am I following? •Uses a pattern matching query language to navigate nodes & edges•Popular Implementations (open source)•Neo4j14NOSQL Database Models
Sample Graph•Nodes (with Properties)•Edges (with Properties)•Key:Value Pairs provice some structure15NOSQL Database ModelsKey:Value Pairs Database •“Schemaless” –no structure •Maps a key to an opaque value(That is, the database doesn’t understand anything within the value) •Simple query operations (put, get, remove, modify) •Keys are unique in a collection•May be a building block for other data models (such as key:value pairs within a  document or a graph) Popular Implementations •Amazon Dynamo (available via AWS in the cloud)•Redis(open source)16NOSQL Database ModelsSample Key:Value aggregate •One primary key •Each attribute has a key and a value•May store multiple values in an array•Key:Value Pairs provice some structure•Not all documents will have the same key:value pairs
17NOSQL Database ModelsKey-Value Pairs Database Example (Amazon DynamoDB)•The primary key value (Id) is 207. •Most of the attributes have simple data types, such as String, Number, Boolean and Null.•One attribute (Color) is a String Set in an array.•The following attributes are document data types:•A List of Related Items. Each element is an Id for a related product.•A Map of Pictures. Each element is a short description of       a picture, along with a URL for the corresponding image file.18NOSQL Database ModelsWide-Column (Column Family) Store Database •A TWO-LEVEL aggregate•Data is stored within “collections” of dynamic related columns•Similar to key:value with the pairs having columnar structure•Based on Google’s “Big Table” •Popular Implementations (open source)•Cassandra•HBase19NOSQL Database ModelsWide-Column (Column Family) Store Database •The first key is the row-key•The entire row is an aggregate of related data•The row consists of many key-value pairs (“columns”)•The second key is the column family•Each column family consists of sparse key:value pairs•“Sparse” means the column value isn’t stored if it isn’t needed20NOSQL Database Models
21NOSQL Database ModelsBenefits of a Wide Column Store •Lookup of a row by the row key will be very fast•In a distributed cluster system, the complete row is stored on a single node•A row may be stored redundantly across the cluster •A row can be retrieved with one access •Massively scalable --can scale to very large capacity with high availability•The columns are "sparse"•That is, a column with no value is not stored22NOSQL Database ModelsIssues with a Wide Column Store •The data model is complex, and not very intuitive•Generally, you create your data model based on your users' queries•The aggregation matches your users' query needs•Possibly taking into account how data is distributed across the cluster•A new query type might require a new data store 23NOSQL Database ModelsIn Summary:•NoSQL Database Software can be adopted to alloworganizations to better handle Big Data •Four types of NoSQL databases:•Document•Graph•Key:Values Pairs•Wide Columnar 1NoSQL ImplementationsLet's take a quick look at two popular NoSQL databases2MongoDBMongoDB is a NoSQL “Document” database.  •Stores collections of documents in a key:valuepair format  •What MongoDB is NOT :•It is not relational•It does not store data in tables•It does not use the SQL query language3MongoDBWhat MongoDB IS :•MongoDB uses a JavaScript-like query language •Community edition is free, open source•Enterprise edition users can purchase support,     advanced features, cloud deployment•Very fast, very scalable•The most widely used NoSQL database4MongoDBMongoDB Concepts•A MongoDB DATABASEcan contain one or more COLLECTIONSof documents•A MongoDB collection can contain many individual DOCUMENTS•Each documenthas a primary key•Primary keys (and any other field) can be indexedfor faster performance 5MongoDBMongoDB Concepts•Documents are stored in JSON format (semi-structured)"Java Script Object Notation" •JSON grew out of the Java Script programming language•JSON is gradually replacing XML •"Extended MarkUp Language"•XML is more verbose; JSON is easier for humans to work with 6MongoDBMongoDB Documents•Documents are “polymorphic”(i.e. “multiple shapes”…) •Not all documents in a collection must have all the same key:valuepairs. •There is no need to declare the structure of a document•It is “self-describing”•The database stores/retrieves the JSON very efficiently •You can add fields to one document in a collection without modifying any other documents in the same collection 7MongoDBMongoDB relies on REPLICATION and SHARDING•MongoDB provides horizontal scaling •You can configure a scalable number of nodes in a cluster •A cluster can be spread across geographically separate data centers•MongoDB can easily scale READ operations across the cluster   (parallelization)•MongoDB has automated node failure detection and failover8MongoDBMongoDB does Primary-to-Secondary Replication•If the Primary node fails for any reason, the other member nodes vote to elect a new primary from among the secondary nodes •All WRITES go to the Primary and are replicated to the secondary replica nodes•Replication is asynchoronous (the primary does not wait for an acknowlegement from the replica) •The number of replicas is configurable9MongoDBNo Database Downtime for Upgrades•Administrators can take a node offline line, upgrade it, and put it back online•Replication/Redundancy allows work to continue even if a node is offline for maintenance –there are multiple copies of the same data 10MongoDBQuick MongoDB Demo 11CassandraCassandra is a popular NoSQL database •Stores data in a key:valuepair format within a wide-row, column-family structure  •What Cassandra is NOT :•It is not relational•It does not store data in rigidly structured tables •It does not use the SQL query language•(But it DOES use a similar "CQL", Cassandra Query Language) 12CassandraWhat Cassandra IS :•Massively scalable, free, open source •Like MongoDB , the Community Edition is free•Enterprise Cassandra users can purchase support and add-on features through a vendor like DataStax•Designed for High Performance and High Scalability •Designed for High Availability, fault tolerant with no SPOF 13CassandraCassandra's Heritage.  Based on: •Google Big Table which is the core foundation for many Google services and is the foundation for Cassandra's internal storage model•Amazon Dynamo: Which supports many of Amazon's core services and is the foundation for Cassandra's distributed backbone •Facebook --which developed and open-sourcedCassandra14CassandraCassandraProvides the benefits of these technologies, but, It improved them for Cassandra's needsCassandra's database model is a partitioned row store (with roots in BigTable) Uses a Peer-to-Peer distributed architecture (roots in Dynamo) 15CassandraCassandra ConceptsAlthough not really stored in a "table", data in Cassandra is •Row-oriented: Each row is an aggregate with columnfamilies representing meaningful, related chunks of data within that aggregate.•Column-oriented: Each column family defines a record with sets of related data.  You can think of a row as a collection of related records across all column families.16CassandraCassandra is a peer-to-peer, fully distributed system where•All nodes are equal (no primary/secondary)•Data is partitioned (replicated & sharded) among multiple nodes in a cluster•Shardingand replication are configurable •No node is a single point of failure (SPOF)•Any node may be read from or written to17CassandraA Cassandra "Instance" = A collection of independent nodes •Configured into a cluster•All nodes are peers (i.e. they all serve the same function)•Data is distributed across all nodes in a cluster •All nodes store data and service client compute requests •A client may read/write to any node, which becomes the coordinator for servicing that particular request•Nodes can have different capacity/resources available (e.g. memory, CPU, disk) •Cassandra distributes data and query workload based on the available resources18CassandraCassandra is very configurable•The number of replicas of each partition •The level of consistency •Can be configured for updates to wait for an acknowledgement or not•"Eventual consistency"19CassandraQuick Cassandra Demo 1The Relational ProblemSituation:•Big Data is exploding all around us•The explosion of Big Data is booming at an increasing rateProblem:Relational Database Systems cannot handle the volume, velocityand varietyof Big Data. The Relational Problem2Challenges•How can we collect, process and store so much data? •How can we process so much data in a timely manner? •How can we analyze so much data and gain meaningful insights?•Can my existing systems/architectures handle this? •Can my existing staff (skills & tools) make the transition?  The Relational Problem3The Relational ProblemThe Relational Database:  40+ year-old technology•Demands STRUCTURE:  Tables, Rows, Columns, Keys, Indexes•Demands ACID Transaction Compliance•Keep my data consistent across transactions•Data Consistency VS Fast Performance and ThroughputThe Relational Problem
What if my Big Data is UNSTRUCTURED? What if customers demand speed over consistency? 4The Relational ProblemDatabase Professionals face a challenge:Do we keep using our relational database systems? Do we transition to newer NoSQL database systems that are designed to handle Big Data? 5The Relational ProblemOne approach:Keep our relational systems, but enhance them to better handle the demands of Big Data. 6The Relational ProblemTechniques to Help RDBMS Handle Big Data•Scaling–Out versus Up•UP:  Add CPU, Memory, Storage –can be costly•OUT:  Add server nodes to a cluster •Clustering•“Commodity” Hardware•Introduces some overhead for inter-node communications7The Relational ProblemMultiple server nodes in a cluster   work together as oneLinear scalability:   Can twicethe number of nodes cut processing time in half? 
8Side Notes --Scaling OutGoogle has been the pioneer in clustering solutions.Watch the Google Container Data Center video.  (2009)https://www.youtube.com/watch?v=zRwPSFpLX8IChallenges they faced and figured out:•Managing Heat •Server Maintenance•UPS –Uninterruptible Power Supply9Side Notes --Scaling OutFollow up:  Watch these Google Data Center tours (7 years later) https://www.youtube.com/watch?v=zDAYZU4A3w0https://www.youtube.com/watch?v=XZmGGAbHqa0https://www.youtube.com/watch?v=avP5d16wEp010The Relational ProblemTechniques to Help RDBMS Handle Big Data•Replication•The foundation of clustering •Parallelization•Computing processes are spread out among all the nodes•Allows work to be done in parallel •Sharding•Subsets of data ("partitions") are spread across different nodes•Allows work to be done in parallel, increases throughput 11The Relational Problem
The role of the "Watcher" in Replication•Sometimes called a "coordinator" node •A component of the replication engine•A special server node that manages the cluster•Directs traffic from application software•Detects if a node goes down, and initiates a FAIL  OVER to a secondary node•Provides HA (High Availability) •Eliminates any SPOF (Single Point Of Failure) 12The Relational ProblemSharding•Distribute data partitions across nodes •Based on key range values•The watcher directs query traffic based upon key values•Allows parallelization
13The Relational ProblemSharding + Replication•Data is distributed via shardingAND•Data is stored redundantly via replication•Further supports parallelization and HA
14The Relational ProblemTwo modes of replication•Primary-to-Secondary (also called "Master-Slave")•Peer-to-Peer 15The Relational ProblemPrimary-to-Secondary Replication•All UPDATES must go to Primary node•READ activity can run against any nodeAdvantages•Good READ Scalability –just add more secondary nodes•Guarantees UPDATE isolationDisadvantages•Constrained by the capacity of the Primary node16The Relational ProblemPeer-to-Peer Replication•UPDATES and READs can go to any nodeAdvantages•Good Scalability –just add more nodes•Provides robust HA in case of node failureDisadvantages•Update propogation is very complex•Difficult to guarantee update isolation17The Relational ProblemThoughts on ReplicationWhat if replicas are geographically distributed? •There can be latency (delay) as updates are propogated across a network•This could cause READ anomalies Trade-off •Data Consistency versus Processing Speed 18The Relational Problem
Geographically distributed nodes •Update on Node 1•READ against Node 3 before the update is propogated•What if the WAN is down? Trade-off •Do I require absolute Data Consistency?•Do I want to delay remote READs while waiting for update propogation? •Or, do I seek the fastest possible execution at the cost of perfect consistency?  19Solving The Relational ProblemCompromise: Enhance my RDBMS architecture to Handle Big DataOr:Abandon Relational DBMS and adopt NoSQL20Solving The Relational ProblemPros & Cons•Keep Using Relational Database Systems•Leverage Software Costs / Investment •Leverage existing Staff•Leverage existing Application Software/Code•Expand by scaling out (horizontally)•Use the Cloud where possible•Utilize Replication, Sharding •Leverage Parallelization (queries run in parallel on different nodes)•Relax ACID compliance where possible for faster throughput 21Solving The Relational ProblemPros & Cons•Adopt a new NoSQL solution•Handles unstructured data •Re-train or replace staff•Rewrite existing Application Software/Code•NoSQL Utilizes Replication, Sharding, Parallelization•NoSQL Relaxes ACID compliance•NoSQL opts for speed over consistency